#!/bin/ksh

source ${.sh.file%/*}/../lib/testenv.ksh

start_environment

name="bhyve"

create_zone bhyve bhyve
# This will also add default values for known attributes
validate bhyve "initial"

# XHCI attribute
zonecfg -z bhyve <<- EOM
	remove attr name=xhci
	add attr; set name=xhci; set type=string; set value=off; end
EOM
validate bhyve "xhci attr"

# Extra attribute
zonecfg -z bhyve <<- EOM
	remove attr name=extra
	add attr; set name=extra; set type=string
	  set value="-s 7,nvme,ram=1024"; end
EOM
validate bhyve "extra attr"

# test attribute (not known to brand)
zonecfg -z bhyve <<- EOM
	add attr; set name=testattr; set type=string
	  set value="not known to brand"; end
EOM
validate bhyve "unknown attr"

# Disks
zonecfg -z bhyve <<- EOM
	add attr; set name=bootdisk; set type=string
	  set value=$dataset/hdd-bhyve; end
	add attr; set name=disk0; set type=string
	  set value=$dataset/hdd-bhyve0; end
	add attr; set name=disk5; set type=string
	  set value=$dataset/hdd-bhyve5; end
	add attr; set name=disk; set type=string
	  set value=$dataset/hdd-bhyve1; end
EOM
# NB: There are deliberately no 'device' items added here to test that zadm
#     does the right thing in this case.
validate bhyve "disks"

# Extra device
zonecfg -z bhyve <<- EOM
	add device; set match=/dev/zvol/rdsk/$dataset/hdd-bhyve99; end
EOM
validate bhyve "extra dev"

zadmshow bhyve > $zadmroot/bhyve.json
compare "$name show" $zadmroot/bhyve.json t/bhyve.d/base.json

# list-images
name="bhyve images"
typeset -i n=`zadm list-images -b bhyve -p omnios | grep -c bloody-`
[ $n -gt 0 ] && result "$name" PASS || result "$name" FAIL

# install -i

# Create a test ZFS volume for installation
magic=ZadmTestImage
ds=$dataset/bhyveimg.$$
img=$zadmroot/bhyve.img
bootdisk=$dataset/hdd-bhyve
zfs create -V 128M $ds
echo $magic > /dev/zvol/rdsk/$ds
zfs snapshot $ds@initial
zfs send $ds@initial > $img

exts=
gzip -c $img > $img.gz; exts+=" .gz"
bzip2 -c $img > $img.bz2; exts+=" .bz2"
xz -c $img > $img.xz; exts+=" .xz"
zstd --no-progress -qqc $img > $img.zst; exts+=" .zst"

name="install bhyve image"
for ext in "" $exts; do
	zfs destroy -r $bootdisk
	# Uninstall here since a true uninstall does not work inside a
	# alternate root.
	zoneadm -z bhyve uninstall
	zadm install -i $img$ext bhyve
	cc=`dd if=/dev/zvol/rdsk/$bootdisk bs=${#magic} count=1 2>/dev/null`
	[ "$cc" = "$magic" ] && result "$name $ext" PASS \
	    || result "$name $ext" FAIL
done

stop_environment

